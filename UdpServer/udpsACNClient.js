/*
UDP sACN client.js

A  client to send sACN packets via UDP.

created 11 Jan 2018
by Tom Igoe

sACN DMX packet description taken from XXXXXX document

*/
const udp = require('dgram');               // include UDP datagram functions
const serverAddress = '128.122.151.182';    // sACN receiver address
const serverPort = 5568;                    // receiving port
const client = udp.createSocket('udp4');    // create a datagram socket

var myUniverse = 1;                               // DMX universe
var myChannels = new Array(512);                  // DMX channel Array
var myDevice = 'myDeviceName';                    // sender name
var myUuid = '130edd1b2d17428997d82bff1f4490fb';  // sender UUID
var sequenceNumber = 0;                           // UDP packet seq. number

// initialize DMX channel array:
for (let c=0; c<myChannels.length; c++) {
  myChannels[c] = 0;
}


// this function composed and sends a sACN packet:
function sendPacket(universe, channels, deviceName,  uuid, seqNumber) {
  // set sACN packet length:
  let packetLength = 126 + channels.length;  // packet length is always this

  // Packet opening: 0x00, 0x10, 0x00, 0x00 + 'ASC-E1.17' + 0x00, 0x00, 0x00
  var byteArray = [0x00, 0x10, 0x00, 0x00, 0x41, 0x53, 0x43, 0x2d, 0x45, 0x31, 0x2e, 0x31, 0x37, 0x00, 0x00, 0x00];

  // add root Layer PDU length: (7 | byte 16 to the end)
  let rootLayerPDU = (0x7 << 12) | (packetLength - 16);
  // console.log(rootLayerPDU);
  byteArray.push(rootLayerPDU>>8);
  byteArray.push(rootLayerPDU%256);

  // add VECTOR_ROOT_E131_DATA (0x00000004) 4 bytes:
  byteArray.push(0x00);
  byteArray.push(0x00);
  byteArray.push(0x00);
  byteArray.push(0x04);

  // add 16-byte UUID
  for (let c=0; c<uuid.length; c+=2) {
    // convert UUID to number, 2 hex characters at a time:
    let num = uuid.substring(c, c+2);
    byteArray.push(Number('0x'+num));
  }
  // add (7 | PDU length)  -- byte 38 to the end
  let framingPDU = (0x7 << 12) | (packetLength - 38);
  byteArray.push(framingPDU>>8);
  byteArray.push(framingPDU%256);

  // add VECTOR_E131_DATA_PACKET (0x00000002) 4 bytes
  byteArray.push(0x00);
  byteArray.push(0x00);
  byteArray.push(0x00);
  byteArray.push(0x02);
  // add UTF-8 [UTF-8] encoded string, null-terminated, 64 bytes
  let l = 0;
  for (l=0; l < deviceName.length; l++) {
    byteArray.push(deviceName.charCodeAt(l));
  }
  // name should be 0 terminated, to 64 bytes
  while(l < 64) {
    byteArray.push(0x00);
    l++;
  }
  // add priority, 1 bytes
  byteArray.push(100);
  // add universe sync, 2 bytes (0x00)
  byteArray.push(0x00);
  byteArray.push(0x00);
  // add sequence number:
  byteArray.push(seqNumber);
  // add options (1 byte) (default 0x00)
  byteArray.push(0x00);
  // add universe number (2 bytes) ( default 0x0001)
  // split it into two bytes:
  byteArray.push(universe >> 8);
  byteArray.push(universe % 256);
  // add (7 | PDU length) -- byte 115 through the end
  let DMPlayerPDU = (0x7 << 12) | (packetLength - 115);
  byteArray.push(DMPlayerPDU>>8);
  byteArray.push(DMPlayerPDU%256);

  // add VECTOR_DMP_SET_PROPERTY (0x02)
  byteArray.push(0x02);
  // add address type & data type (0xa1)
  byteArray.push(0xa1);
  // add first property address (0x0000)
  byteArray.push(0x00);
  byteArray.push(0x00);
  // add address increment (0x0001)
  byteArray.push(0x00);
  byteArray.push(0x01);
  // add property value count (0x0001 -- 0x0201) -- number of channels + 1
  let propertyValueCount = channels.length + 1;
  // split it into two bytes:
  byteArray.push(propertyValueCount>>8);
  byteArray.push(propertyValueCount%256);

  // add 0x00  (DMX start byte)
  byteArray.push(0x00);
  // add channel values:
  for (let c = 0; c<512; c++) {
      byteArray.push(channels[c]);
  }

  var thisPacket = Buffer.from(byteArray);
  console.log(thisPacket);
  console.log(serverAddress);
  console.log(serverPort);

  //client.send(thisPacket, serverPort, serverAddress, messageSent);
}

// var packet = Buffer.from([0x00, 0x10, 0x00, 0x00, 0x41, 0x53, 0x43, 0x2d, 0x45, 0x31, 0x2e, 0x31, 0x37, 0x00, 0x00, 0x00, 0x72, 0x7e, 0x00, 0x00, 0x00, 0x04, 0xfb, 0x3c, 0x10, 0x65, 0xa1, 0x7f, 0x4d, 0xe2, 0x99, 0x19, 0x31, 0x7a, 0x07, 0xc1, 0x00, 0x52, 0x72, 0x58, 0x00, 0x00, 0x00, 0x02, 0x51, 0x20, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x50, 0x6c, 0x75, 0x73, 0x20, 0x2d, 0x20, 0x01, 0x31, 0x2e, 0x33, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x01, 0x72, 0x0b, 0x02, 0xa1, 0x00, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0xff, 0xbe, 0x8e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);


sendPacket(myUniverse, myChannels, myDevice, myUuid, sequenceNumber);


function messageSent(error) {             // when a message is sent,
  if (error) {                            // if there's an error,
    console.log(error);                   // show it
  } else {
    sequenceNumber++;                     // increment sequence number
    sequenceNumber = sequenceNumber%256;  // but keep it in one byte
    console.log('packet sent');
  }
};
